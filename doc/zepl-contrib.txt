*zepl-contrib.txt*               Community contributed extensions for zepl.vim.


                           Zepl.vim Extension Manual~


Welcome to the Zepl community contributed extension manual.  *zepl-contrib*

This is the home of various potentially useful user contributed extensions for
Zepl.  Nothing here is enabled by default; individual extensions can be
enabled as desired.  Documentation for each extension can be found in this
help doc.

If you have created some useful extensions for Zepl and think that others
might also find them useful, please create a pull request.

Note: No guarantees are made as to the stability of these extensions.

    1. Rationale .................................. |zepl-contrib-rationale|
    2. Language-specific .......................... |zepl-languages|
    3. Extra features ............................. |zepl-extra-features|

Don't forget to check out the main |zepl.txt| manual.

==============================================================================
 1. RATIONALE                                          *zepl-contrib-rationale*

My goal is to keep the Zepl core as minimal and bug-free as possible, this
means that it cannot include language-specific code or many potentially useful
features.  To resolve this issue I designed Zepl with extensibility in mind,
and created this contrib system.

The extensibility of Zepl makes it possible to add many desired features and
add support for any language, even those with unusual syntax (e.g. Python:
|zepl-python|).  The contrib system makes it possible to ship these with Zepl.

==============================================================================
 2. LANGUAGE-SPECIFIC ENHANCEMENTS                             *zepl-languages*

Language-specific enhancements for Zepl.

    * Python  |zepl-python|

------------------------------------------------------------------------------
                                                                  *zepl-python*

Copy/adapt the code below to your |vimrc| to add improved Python support.
>
    runtime zepl/contrib/python.vim

    autocmd! FileType python let b:repl_config = {
                \   'cmd': 'python',
                \   'formatter': function('zepl#contrib#python#formatter')
                \ }
<
==============================================================================
 3. EXTRA FEATURES                                        *zepl-extra-features*

Extra features for Zepl.

    * Load files  |zepl-load_files|

------------------------------------------------------------------------------
                                          *zepl-load_files*  *:ReplLoadFile*  *gz.*

Running `gggzG` to load the entire file into the REPL isn't great as it'll
just fill the screen and history with junk.  Luckily many REPLs and languages
provide features to cleanly load a file into the environment.  This Zepl
extension makes it easier to use these features.

Add the following code snippet to your |vimrc| to enable this extension.
>
    runtime zepl/contrib/load_files.vim
<
By using the `load_file` key in 'b:repl_config', you can specify a command for
zepl to insert the file name into, and then send to the REPL.  The command
uses `%s` in place of the file name (see: |printf()|).

Examples:
>
    autocmd FileType javascript let b:repl_config = {
            \   'cmd': 'node',
            \   'load_file': '.load "%s"'
            \ }

    autocmd FileType julia let b:repl_config = {
            \   'cmd': 'julia',
            \   'load_file': 'include("%s")'
            \ }

    autocmd FileType scheme let b:repl_config = {
            \   'cmd': 'rlwrap csi',
            \   'load_file': '(load "%s")'
            \ }
<
Once configured, you can type `gz.` in |Normal-mode| to send the current file.
This mapping can be disabled with 'g:zepl_default_maps' and rebound with the
*<Plug>ReplLoadFile* plug.

Alternatively, you can use the |:ReplLoadFile| command.  Any number of files
can be specified, but if none are, it'll load the current file.

Examples:
>
    :ReplLoadFile            " Load current file into REPL.
    :ReplLoadFile %          " Load current file into REPL.
    :ReplLoadFile a.py b.py  " Load files into REPL.
<
------------------------------------------------------------------------------
vim:et:ts=2:sts=2:sw=2:tw=78:ft=help:norl:
