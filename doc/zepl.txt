*zepl.txt*                                Lightweight REPL integration for Vim.


                         Zepl.vim Manual by Alex Vear~


Welcome to the zepl.vim user manual.           *zepl*  *zepl.vim*  *vim-zepl*  *repl*

    1. Introduction ............................... |zepl-intro|
    2. Installation ............................... |zepl-installation|
    3. Quick start ................................ |zepl-quick-start|
    4. Configuration .............................. |zepl-configuration|
    5. Remapping keys ............................. |zepl-remap|
    6. Change log ................................. |zepl-changelog|
    7. Legal ...................................... |zepl-legal|

Note: Don't forget to check out the |zepl-contrib.txt| manual for additional
features and improved language support.

==============================================================================
 1. INTRODUCTION                                                   *zepl-intro*

Zepl.vim is a lightweight REPL integration package for Vim 8.1+ and Neovim.
It provides commands to start and jump to a running REPL, as well as commands
and key bindings to send text to the REPL.

Zepl.vim follows several design philosophies:

1. Should be easy to use and configure: not much to learn and very few
   configuration options.
2. Feel like a part of Vim.  Key bindings and commands should work just like
   the built-in ones.
3. Tiny implementation. (Must not exceed 200 LOC.)

There are a couple of known limitations:

* Only 1 REPL can be open at a time (per Vim instance).
* The 'hidden' option is required for Neovim and will be automatically set.

==============================================================================
 2. INSTALLATION                                            *zepl-installation*

Installation of zepl.vim can be performed by using your preferred
plugin/package management tool(s).  If you don't have a Vim package manager
I recommend using Vim 8 packages.

Just run these 2 commands from your shell.
>
    git clone https://github.com/axvr/zepl.vim ~/.vim/pack/plugins/start/zepl
    vim +'helptags ~/.vim/pack/plugins/start/zepl/doc/' +q
<
==============================================================================
 3. QUICK START                                              *zepl-quick-start*

The following is a short quick start guide.  For more detailed documentation,
read the rest of the manual.

                                                                        *:Repl*
Running a REPL~

Start a REPL using the |:Repl| command.  This command is in the format:
>
    :[mods] [size] Repl [command]
<
Where `[mods]` is any of |<mods>| (e.g. |:vertical| to open REPL in a vertical
split, or |:hide| to start the REPL in the background).

`[size]` is the height of the REPL window.  If `[mods]` contained |:vertical|
this will set the width of the REPL window.

`[command]` is the interpreter to use.  If omitted and a REPL is already
running, zepl.vim will open/jump to that REPL, otherwise it'll use the command
specified in the 'b:repl_config' variable.

Examples:~
>
    " Start a new REPL using command from `b:repl_config` or jump to already
    " running REPL.
    :Repl

    " Start REPL with command `clj` with height of 16 characters.
    :16 Repl clj

    " Start REPL in vertical split with command from `b:repl_config` or jump
    " to running REPL (open in vertical split if not already visible).
    :vert Repl

    " Start REPL (command from `b:repl_config`) in background.
    :hide Repl

    " Open vertical REPL 60 columns wide on right of the screen connected to
    " a running Clojure socket REPL through netcat.
    :botright vertical 60 Repl rlwrap nc localhost 5555

    " Start REPL in new tab or open running REPL in new tab (if not open).
    :tab Repl
<
You can configure how the REPL is opened using the 'switchbuf' option.
Zepl.vim automatically sets the `useopen` flag.

------------------------------------------------------------------------------
Send text to REPL~

Zepl.vim provides both a key binding and a command to send text from any
buffer into a running REPL to be evaluated.

                                                                   *gz* *gzz* *gzZ*
Key bindings~

The default key binding for zepl.vim is |gz|.  To change this, see |zepl-remap|.

The |gz| key can accept any motion (see: |motion.txt|) you would do with
another key such as |d|, |y|, |c|, |gq|, |=|, etc.  To send the current
paragraph to the REPL use `gzip`.  To send the current s-expression to the
REPL use `gza)`, or to send the current line use.

|gz| will also work in visual mode, so you can also do `vipgz` to send the
current paragraph.  `Vi3jgz` to send the next 4 lines to the REPL.  Even
something complex like `vabababgz` will work (this selects the current
s-expression, expand 2 levels out and sends the entire thing to the REPL).

A couple of short hand key combinations are provided: |gzz| rather than `gz_`
to send the current line, and |gzZ| rather than `gz$` to send from the cursor
position to the end of the line.

                                                                    *:ReplSend*
Command~

The `:ReplSend` command is somewhat similar to the key binding but has
different usage, it also only works |linewise|.  The command follows this
format:
>
    :[range] ReplSend[!] [text]
<
You can either provide `[range]` or `[text]` to be sent to the REPL.  If you
give both, only `[text]` will be sent.

`[range]` is an Ex command-line range (see |[range]|).  Note: like all
standard Ex commands, `:ReplSend` will only operate on whole lines.

`[text]` is any arbitrary text you want to send to the REPL.  This is useful
for scripting.

`[!]` will tell zepl.vim to send the text "verbatim", meaning that it won't
modify the text in any way.  In regular use this won't be used much, it mainly
exists for programmability and sending literal characters to the REPL.

Examples:~
>
    " Send current line to REPL.
    :ReplSend

    " Send line 3 to the REPL.
    :3ReplSend

    " Send lines 3â€“9 to the REPL.
    :3,9 ReplSend

    " Send visual line selection to REPL.
    '<,'>:ReplSend

    " Send `print("Hello, world!")` to the REPL.
    :ReplSend print("Hello, world!")
<
==============================================================================
 4. CONFIGURATION                                          *zepl-configuration*

                                                              *'b:repl_config'*

A buffer local variable containing a |Dictionary| for configuration of default
REPL settings.

There are currently 2 keys in use:

  * `cmd`        (see: |zepl-cmd|)
  * `formatter`  (see: |zepl-formatter|)

Other keys may be defined by |zepl-contrib| extensions.

------------------------------------------------------------------------------
                                                                     *zepl-cmd*

The `cmd` key for 'b:repl_config' allows you to specify a default interpreter
command used by |:Repl|.
>
    augroup zepl
        autocmd!
        autocmd FileType python     let b:repl_config = { 'cmd': 'python3' }
        autocmd FileType javascript let b:repl_config = { 'cmd': 'node' }
        autocmd FileType clojure    let b:repl_config = { 'cmd': 'clj' }
        autocmd FileType scheme     let b:repl_config = { 'cmd': 'rlwrap csi' }
        autocmd FileType lisp       let b:repl_config = { 'cmd': 'sbcl' }
        autocmd FileType julia      let b:repl_config = { 'cmd': 'julia' }
    augroup END
<
Note: for better Python support see: |zepl-python|.

------------------------------------------------------------------------------
                                                               *zepl-formatter*

Before text is sent to the REPL, zepl.vim will run it through a "formatter"
function.  The default formatter only performs some basic repairs, however you
can define your own custom formatters to modify the text in any way you wish.
The most common use case for this is to add support for syntactically unusual
languages such as Python (see: |zepl-languages| and |zepl-python|).

The formatter function can be specified using the `formatter` key in the
'b:repl_config' dictionary.
>
    let b:repl_config = {
            \   'cmd': 'python3',
            \   'formatter': function("zepl#contrib#python#formatter")
            \ }
<
The formatter will recieve 1 argument containing a list of lines to be
processed.  It is expected that this function returns a string, with the lines
joined by calling:
>
    zepl#generic_formatter(text)
<
or:
>
    join(text, "\<CR>") . "\<CR>"
<
An decent example formatter can be found in the `python.vim` contrib file.

------------------------------------------------------------------------------
                                                        *'g:zepl_default_maps'*
If this option is set to `0`, the default key bindings will be disabled.  It
is expected that all |zepl-contrib| extensions will respect this option.

This option defaults to `1` (use default bindings).

==============================================================================
 5. REMAPPING KEYS     *<Plug>ReplSendRegion*  *<Plug>ReplSendVisual*  *zepl-remap*

Zepl.vim offers 2 |<Plug>| mappings to set your own keys to use to send text
to the running REPL.

The first: |<Plug>ReplSendRegion| is for use in |Normal-mode|.
>
    nmap <silent> <leader>s <Plug>ReplSendRegion
<
The second: |<Plug>ReplSendVisual| is for use in |Visual-mode|.
>
    vmap <silent> <leader>s <Plug>ReplSendVisual
<
I recommend setting both to the same key to make it easier to remember.

See also: 'g:zepl_default_maps'.

WARNING: make sure to use |nmap| and |vmap| and not |nnoremap| or |vnoremap| as
those don't work with |<Plug>| mappings.

==============================================================================
 6. CHANGE LOG                                                 *zepl-changelog*

v1.0 [2020-03-09]~

  * Added Neovim support.
  * Added MS Windows support.
  * Introduction of |zepl-contrib|.
  * Custom formatters (zepl.vim now supports Python -- |zepl-python|).
  * Send text to REPL verbatim (disables formatters).
  * Cleaned up some of the codebase and improved documentation.
  * Made public function API stable.

v0.1 [2020-02-23]~

  * Initial release.

==============================================================================
 7. LEGAL                                                          *zepl-legal*

*No Rights Reserved*

All source code, documentation and associated files packaged with zepl.vim are
dedicated to the public domain.  A full copy of the CC0 (Creative Commons Zero
v1.0 Universal) public domain dedication should have been provided with this
extension in the `COPYING` file.

------------------------------------------------------------------------------
vim:et:ts=4:sts=4:sw=4:tw=78:ft=help:norl:
