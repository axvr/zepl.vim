*zepl.txt*                                Lightweight REPL integration for Vim.


                         Zepl.vim Manual by Alex Vear~


Welcome to the zepl.vim user manual.           *zepl*  *zepl.vim*  *vim-zepl*  *repl*

    1. Introduction ............................... |zepl-intro|
    2. Installation ............................... |zepl-installation|
    3. Quick start ................................ |zepl-quick-start|
    4. Configuration .............................. |zepl-configuration|
    5. Remapping keys ............................. |zepl-remap|
    6. Change log ................................. |zepl-changelog|
    7. Legal ...................................... |zepl-legal|

==============================================================================
 1. INTRODUCTION                                                   *zepl-intro*

Zepl.vim is a lightweight REPL integration package for Vim.  It provides tools
to start and jump to a running REPL, as well as commands and key bindings to
send text to the REPL.

Zepl.vim follows several design philosophies:

1. Should be easy to use and configure: not much to learn and very few
   configuration options.
2. Feel like a part of Vim.  Key bindings and commands should work just like
   the built-in ones.
3. Tiny implementation. (Must not exceed 200 LOC; currently just under 140.)

------------------------------------------------------------------------------
                                                             *zepl-limitations*

There are a couple of known limitations which may be deal breakers for many
potential users.  If you cannot live without either of these please submit
a patch (please remember to follow the design philosophies).

* Vim 8.1+ only. (No Neovim support)
* Only 1 REPL can be open at a time (per Vim instance).

==============================================================================
 2. INSTALLATION                                            *zepl-installation*

Installation of zepl.vim can be performed by using your preferred
plugin/package management tool(s).  If you don't have a Vim package manager
I recommend using Vim 8 packages.

Just run these 2 commands from your shell.
>
    git clone https://github.com/axvr/zepl.vim ~/.vim/pack/plugins/start/zepl
    vim +'helptags ~/.vim/pack/plugins/start/zepl/doc/' +q
<
==============================================================================
 3. QUICK START                                              *zepl-quick-start*

The following is a short quick start guide.  For more detailed documentation,
read the rest of the manual.

                                                                        *:Repl*
Running a REPL~

Start a REPL using the |:Repl| command.  This command is in the format:
>
    :[mods] [size] Repl [command]
<
Where `[mods]` is any of |<mods>| (e.g. |:vertical| to open REPL in a vertical
split, or |:hide| to start the REPL in the background).

`[size]` is the height of the REPL window.  If `[mods]` contained |:vertical|
this will set the width of the REPL window.

`[command]` is the interpreter to use.  If omitted and a REPL is already
running, zepl.vim will open/jump to that REPL, otherwise it'll use the command
specified in the 'b:repl_config' variable.

Examples:~
>
    " Start a new REPL using command from `b:repl_config` or jump to already
    " running REPL.
    :Repl

    " Start REPL with command `clj` with height of 16 characters.
    :16 Repl clj

    " Start REPL in vertical split with command from `b:repl_config` or jump
    " to running REPL (open in vertical split if not already visible).
    :vert Repl

    " Start REPL (command from `b:repl_config`) in background.
    :hide Repl

    " Open vertical REPL 60 columns wide on right of the screen connected to
    " a running Clojure socket REPL through netcat.
    :botright vertical 60 Repl rlwrap nc localhost 5555

    " Start REPL in new tab or open running REPL in new tab (if not open).
    :tab Repl
<
You can configure how the REPL is opened using the 'switchbuf' option.
Zepl.vim automatically sets the `useopen` flag.

------------------------------------------------------------------------------
Send text to REPL~

Zepl.vim provides both a key binding and a command to send text from any
buffer into a running REPL to be evaluated.

                                                                   *gz* *gzz* *gzZ*
Key bindings~

The default key binding for zepl.vim is |gz|.  To change this, see |zepl-remap|.

The |gz| key can accept any motion (see: |motion.txt|) you would do with
another key such as |d|, |y|, |c|, |gq|, |=|, etc.  To send the current
paragraph to the REPL use `gzip`.  To send the current s-expression to the
REPL use `gza)`, or to send the current line use.

|gz| will also work in visual mode, so you can also do `vipgz` to send the
current paragraph.  `Vi3jgz` to send the next 4 lines to the REPL.  Even
something complex like `vabababgz` will work (this selects the current
s-expression, expand 2 levels out and sends the entire thing to the REPL).

A couple of short hand key combinations are provided: |gzz| rather than `gz_`
to send the current line, and |gzZ| rather than `gz$` to send from the cursor
position to the end of the line.

                                                                    *:ReplSend*
Command~

The `:ReplSend` command is somewhat similar to the key binding but has
different usage, it also only works line-wise.  The command follows this
format:
>
    :[range] ReplSend [text]
<
You can either provide `[range]` or `[text]` to be sent to the REPL.  If you
give both, only `[text]` will be sent.

`[range]` is an Ex command-line range (see |[range]|). Note that |:ReplSend|
will only send whole lines; it will ignore column positions (I don't know how
to fix this, if you do, please submit a patch).

`[text]` is any arbitrary text you want to send to the REPL.  This is useful
for scripting.

Examples:~
>
    " Send current line to REPL.
    :ReplSend

    " Send line 3 to the REPL.
    :3ReplSend

    " Send lines 3â€“9 to the REPL.
    :3,9 ReplSend

    " Send visual line selection to REPL.
    '<,'>:ReplSend

    " Send `print("Hello, world!")` to the REPL.
    :ReplSend print("Hello, world!")
<
==============================================================================
 4. CONFIGURATION                                          *zepl-configuration*

                                                              *'b:repl_config'*
This variable allows you configure default REPL settings.

It is a buffer local dictionary.  At the moment only the `cmd` key is used,
which is the default interpreter for that buffer.  Additional keys may be
added in the future, and/or other plugins and scripts can add their own keys.

Example~

The following example configures default REPLs per filetype for the |:Repl|
command.
>
    augroup zepl
        autocmd!
        autocmd FileType python     let b:repl_config = { 'cmd': 'python3' }
        autocmd FileType javascript let b:repl_config = { 'cmd': 'node' }
        autocmd FileType clojure    let b:repl_config = { 'cmd': 'clj' }
        autocmd FileType scheme     let b:repl_config = { 'cmd': 'rlwrap csi' }
        autocmd FileType lisp       let b:repl_config = { 'cmd': 'sbcl' }
        autocmd FileType julia      let b:repl_config = { 'cmd': 'julia' }
    augroup END
<
------------------------------------------------------------------------------
                                 *'g:zepl_default_maps'*  *'b:zepl_default_maps'*
Type: boolean~
Default: 1~

If 'g:zepl_default_maps' is set to `0`, the default key bindings will be
globally disabled.  Likewise, if 'b:zepl_default_maps' is set to `0`, the
default key bindings will be disabled in that buffer.

If |gz| is already in use, zepl.vim will not enable the key bindings.

==============================================================================
 5. REMAPPING KEYS     *<Plug>ReplSendRegion*  *<Plug>ReplSendVisual*  *zepl-remap*

Zepl.vim offers 2 |<Plug>| mappings to set your own keys to use to send text
to the running REPL.

The first: |<Plug>ReplSendRegion| is for use in |Normal-mode|.
>
    nmap <silent> <leader>s <Plug>ReplSendRegion
<
The second: |<Plug>ReplSendVisual| is for use in |Visual-mode|.
>
    vmap <silent> <leader>s <Plug>ReplSendVisual
<
I recommend setting both to the same key to make it easier to remember.

Note: You will likely want to disable zepl.vim's default key bindings before
setting your own.  This can be done using 'g:zepl_default_maps'.

WARNING: make sure to use |nmap| and |vmap| and not |nnoremap| or |vnoremap| as
those don't work with |<Plug>| mappings.

==============================================================================
 6. CHANGE LOG                                                 *zepl-changelog*

v0.1 [2020-02-23]~

  * Initial release (note that the public API is subject to change in future
    releases before the v1.0 release).

==============================================================================
 7. LEGAL                                                          *zepl-legal*

*No Rights Reserved*

All source code, documentation and associated files packaged with zepl.vim are
dedicated to the public domain.  A full copy of the CC0 (Creative Commons Zero
1.0) public domain dedication should have been provided with this extension in
the `COPYING` file.

------------------------------------------------------------------------------
vim:et:ts=4:sts=4:sw=4:tw=78:ft=help:norl:
