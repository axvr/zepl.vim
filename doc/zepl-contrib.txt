*zepl-contrib.txt*               Community contributed extensions for zepl.vim.


                           Zepl.vim Extension Manual~


Welcome to the zepl.vim community contributed extension manual.  *zepl-contrib*

As zepl.vim aims to be both lightweight and language agnostic, it can't really
include any language-specific code, and it's feature-set is kept to a minimum.
The downside of this is that a lot of developers (myself included) need these
additional features and better language-specific support from their tools.

Zepl-contrib is my solution.  It allows me to ship optional features while
keeping the core "true to its goals".

As far as I know, zepl.vim is the first Vim plugin to have such a system, so
we'll see where this leads.

    1. Language-specific .......................... |zepl-languages|
    2. Extra features ............................. |zepl-extra-features|

Note: Don't forget to check out the main |zepl.txt| manual.

==============================================================================
 1. LANGUAGE-SPECIFIC ENHANCEMENTS                             *zepl-languages*

Language-specific enhancements for zepl.vim.

    * Python  |zepl-python|

------------------------------------------------------------------------------
                                                                  *zepl-python*

Copy/adapt the code below to your |vimrc| to add improved Python support.
>
    runtime zepl/contrib/python.vim

    autocmd FileType python let b:repl_config = {
                \   'cmd': 'python',
                \   'formatter': function('zepl#contrib#python#formatter')
                \ }
<
==============================================================================
 2. EXTRA FEATURES                                        *zepl-extra-features*

Extra features for zepl.vim.

    * Load files  |zepl-load_files|

------------------------------------------------------------------------------
                                          *zepl-load_files*  *:ReplLoadFile*  *gz.*

Running `gggzG` to load the entire file into the REPL isn't great as it'll
just fill the screen and history with junk.  Many REPLs and languages provide
features to cleanly load a file into the environment.

|zepl-load_files| provides several easy ways to load a file into the REPL
environment.

Add the following code snippet to your |vimrc| to enable this feature.
>
    runtime zepl/contrib/load_files.vim
<
By using the `load_file` key in 'b:repl_config', you can specify a command for
zepl to insert the file name into, and then send to the REPL.  The command
uses `%s` in place of the file name (see: |printf()|).

Examples:
>
    autocmd FileType javascript let b:repl_config = {
            \   'cmd': 'node',
            \   'load_file': '.load "%s"'
            \ }

    autocmd FileType julia let b:repl_config = {
            \   'cmd': 'julia',
            \   'load_file': 'include("%s")'
            \ }

    autocmd FileType scheme let b:repl_config = {
            \   'cmd': 'rlwrap csi',
            \   'load_file': '(load "%s")'
            \ }
<
Once configured, you can type `gz.` in |Normal-mode| to send the current file.
This mapping can be disabled with 'g:zepl_default_maps' and rebound with the
*<Plug>ReplLoadFile* plug.

Alternatively use the |:ReplLoadFile| command.  Any number of files can be
specified, but if none are, it'll load the current file.

Examples:
>
    :ReplLoadFile            " Load current file into REPL.
    :ReplLoadFile %          " Load current file into REPL.
    :ReplLoadFile a.py b.py  " Load files into REPL.
<
------------------------------------------------------------------------------
vim:et:ts=2:sts=2:sw=2:tw=78:ft=help:norl:
